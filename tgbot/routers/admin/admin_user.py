from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from tgbot.database.db_users import Userx
from tgbot.keyboards.inline_main import admin_user_finl

router = Router(name=__name__)


class AdminUser(StatesGroup):
    check_user_id = State()
    user_manipulation = State()
    user_change_balance = State()
    user_set_ban = State()
    user_change_time = State()


# –ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.callback_query(F.data == 'admin_user')
async def admin_user(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ')

    await state.set_state(AdminUser.check_user_id)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å id –ø–æ—Å–ª–µ –µ–≥–æ –≤–≤–æ–¥–∞
@router.message(AdminUser.check_user_id)
async def check_user_id(message: Message, bot: Bot, state: FSMContext):
    await message.delete()

    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=(message.message_id - 1))
    except:
        pass

    try:
        user_id = int(message.text)
    except:
        await state.clear()
        await message.answer('‚ö†Ô∏è –í–≤–µ–¥—ë—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ')
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ id –Ω–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å
    try:
        if Userx.user_exist(user_id):
            await state.update_data(user_id=int(message.text))
            await state.set_state(AdminUser.user_manipulation)
    except:
        await state.clear()
        await message.answer(f'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {user_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n'
                             f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ!')
        return

    user = Userx.get(user_id=user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
    if user.user_ban == 0:
        user_ban = '‚úÖ –ù–µ –∑–∞–±–∞–Ω–µ–Ω'
        ban_btn = '‚õîÔ∏è –ó–∞–±–∞–Ω–∏—Ç—å'
    elif user.user_ban == 1:
        user_ban = '‚õîÔ∏è –ó–∞–±–∞–Ω–µ–Ω'
        ban_btn = '‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å'

    await message.answer(f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \n\n'
                         f'üÜî: <code>{user.user_id}</code>\n'
                         f'üíµ: {user.user_balance}\n\n'
                         f'{user_ban}',
                         reply_markup=admin_user_finl(ban_btn))


##### [ USER_BALANCE ] #####
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.callback_query(F.data == 'admin_change_balance')
async def user_balance_to_change(call: CallbackQuery, state: FSMContext):
    await call.message.delete()

    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ üíµ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:')

    await state.set_state(AdminUser.user_change_balance)


# –ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(AdminUser.user_change_balance)
async def check_user_id(message: Message, bot: Bot, state: FSMContext):
    await message.delete()

    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=(message.message_id - 1))
    except:
        pass

    user_data = await state.get_data()
    try:
        user_id = int(user_data['user_id'])
        user_upbalance = int(message.text)
    except:
        await message.answer('‚ö†Ô∏è –ë—ã–ª —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥—ã–Ω–Ω—ã—Ö')
        await state.clear()
        return

    try:
        Userx.user_change_balance(user_id=user_id, count=user_upbalance)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {user_upbalance} berrycoins")
        await bot.send_message(chat_id=user_id, text=f'‚úÖ –ê–¥–º–∏–Ω –Ω–∞—á–∏—Å–ª–∏–ª –í–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å {user_upbalance} berrycoins!')
    except:
        await message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ –≤ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
        await state.clear()
        return

    await state.clear()


##### [ USER_BAN/UNBAN ] #####
# –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == 'admin_ban_unban_user')
async def user_ban(call: CallbackQuery, bot: Bot, state: FSMContext):
    await call.message.delete()

    user_data = await state.get_data()

    try:
        user_id = int(user_data['user_id'])
        user_to_ban = user_id
        answer = Userx.user_ban_unban(user_to_ban)
        if answer:
            await call.message.answer(f'‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_ban} –±—ã–ª <b>–∑–∞–±–∞–Ω–µ–Ω</b>')
            try:
                await bot.send_message(chat_id=user_to_ban, text='‚õî –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n'
                                                                 '–¢–µ–ø–µ—Ä—å –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∏–¥–µ–æ\n\n'
                                                                 '<b>–ü—Ä–∏—á–∏–Ω–∞:</b> –ë–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.')
            except:
                pass
        else:
            await call.message.answer(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_ban} –±—ã–ª <b>—Ä–∞–∑–±–∞–Ω–µ–Ω</b>')
            try:
                await bot.send_message(chat_id=user_to_ban, text='‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n'
                                                                 '–¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∏–¥–µ–æ')
            except:
                pass
    except:
        await call.message.answer('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n'
                                  '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ')

    await state.clear()


##### [ USER_TIME ] #####
# –£–∫–∞–∑–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
@router.callback_query(F.data == 'admin_change_time')
async def choose_user(call: CallbackQuery, state: FSMContext):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:')

    await state.set_state(AdminUser.user_change_time)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
@router.message(AdminUser.user_change_time)
async def choose_user(message: Message, state: FSMContext):
    user_data = await state.get_data()
    try:
        user_id = int(user_data['user_id'])
        user_uptime = int(message.text)
    except:
        await message.answer('‚ö†Ô∏è –ë—ã–ª —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥—ã–Ω–Ω—ã—Ö')
        await state.clear()
        return

    try:
        Userx.user_uptime(user_id=user_id, minutes=user_uptime)
        await message.answer(f"‚úÖ –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_data['user_id']}, –∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç - {user_uptime}")
    except:
        await message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ –≤ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
        await state.clear()
        return

    await state.clear()
