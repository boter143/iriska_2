from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from tgbot.database.db_users import Userx
from tgbot.database.db_video import Videox
from tgbot.keyboards.reply_main import send_video_frep, menu_frep
from tgbot.data.config import CHAT_ID, MINUTES_PER_VIDEO

router = Router(name=__name__)


class sendVideo(StatesGroup):
    take_message = State()


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏—ë–º—â–∏–∫–∞ –≤–∏–¥–µ–æ
@router.message(F.text == 'üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ')
async def about_video(message: Message, state: FSMContext):
    await message.answer('‚ö†Ô∏è –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å 2 –≤–∏–¥–µ–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n\n'
                         '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É',
                         reply_markup=send_video_frep())

    await state.update_data(count_video='0')
    await state.update_data(count_unic_video=0)

    await state.set_state(sendVideo.take_message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–∏—ë–º—â–∏–∫
@router.message(sendVideo.take_message)
async def filter_video(message: Message, state: FSMContext, bot: Bot):
    user = Userx.get(user_id=int(message.from_user.id))
    if message.video and user.user_ban != 1:
        state_data = await state.get_data()

        # –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ
        video_name = message.video.file_name
        video_size = message.video.file_size
        video_duration = message.video.duration

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
        try:
            new_count_video = int(state_data['count_video']) + 1
        except:
            return

        await state.update_data(count_video=new_count_video)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
        if Videox.video_unic(video_name=video_name, video_size=video_size, video_duration=video_duration):
            # –°—á—ë—Ç—á–∏–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ
            new_count_unic_video = int(state_data['count_unic_video']) + 1
            await state.update_data(count_unic_video=new_count_unic_video)

            # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–∏–¥–µ–æ –≤ —Ç–≥–∫
            try:
                channel_message_copy = await bot.copy_message(from_chat_id=message.from_user.id, chat_id=CHAT_ID,
                                                              message_id=message.message_id)
                channel_message_id = int(channel_message_copy.message_id)
                await bot.edit_message_caption(chat_id=CHAT_ID, message_id=channel_message_id, caption=None)
            except:
                pass

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≤ –¥–±
            try:
                Videox.add(video_id=channel_message_id, video_name=video_name, video_size=video_size,
                           video_duration=video_duration, user_id=message.from_user.id)
            except:
                pass

            await state.set_state(sendVideo.take_message)
    else:
        if message.text == '‚úîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å':
            state_data = await state.get_data()
            time_up = state_data['count_unic_video'] * MINUTES_PER_VIDEO
            Userx.user_uptime(message.from_user.id, time_up)
            await message.answer(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {state_data['count_unic_video']}/{state_data['count_video']} –≤–∏–¥–µ–æ\n\n"
                                 f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {time_up} –º–∏–Ω—É—Ç –¥–æ—Å—Ç—É–ø–∞!",
                                 reply_markup=menu_frep())
            await state.clear()
            return
        elif user.user_ban == 1:
            await message.answer('‚õî –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n'
                                 '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∏–¥–µ–æ')
        else:
            await message.answer('‚ö† –ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!')
            await state.set_state(sendVideo.take_message)
