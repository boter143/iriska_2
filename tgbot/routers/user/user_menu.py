from random import randint

import numbersystem

from aiogram import Router, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from tgbot.database.db_users import Userx
from tgbot.database.db_video import Videox
from tgbot.keyboards.reply_main import menu_frep, send_video_frep
from tgbot.keyboards.inline_main import discord_link_finl, balance_add_finl, premium_tariffs, archive_tariffs
from tgbot.data.config import DISCORD_LINK, MINUTES_PER_VIDEO, MINUTES_PER_REFERRAL
from tgbot.utils.const_functions import convert_date, get_date, get_unix
from tgbot.utils.mics_functions import send_archive_video_to_user

router = Router(name=__name__)


##### [/START] #####
@router.message(Command(commands=['start']))
async def start(message: Message, bot: Bot, state: FSMContext):
    await state.clear()

    user = Userx.get(user_id=message.from_user.id)

    if user.user_referral == 0:
        first_start = True
    else:
        first_start = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    referral_id = message.text[7:]
    if referral_id != '':
        referral_id = numbersystem.octalToDecimal(int(message.text[7:]))
        try:
            if message.from_user.id != referral_id and Userx.user_check_ref(referral_id):
                if user.user_referral == 0:
                    Userx.user_add_ref(message.from_user.id, referral_id)
                    Userx.user_uptime(referral_id, MINUTES_PER_REFERRAL)
                    try:
                        await bot.send_message(referral_id, '–£ –í–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n'
                                                            f'+ {MINUTES_PER_REFERRAL} –º–∏–Ω—É—Ç –∫ –¥–æ—Å—Ç—É–ø—É')
                    except:
                        pass
            else:
                await message.answer('–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É!')
        except:
            await message.answer('–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É!')
    else:
        Userx.user_without_ref(message.from_user.id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ
    await message.answer(f'Discord (–Ω–∞ —Å–ª—É—á–∞–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)\n\n{DISCORD_LINK}', reply_markup=discord_link_finl())
    try:
        if referral_id != '' and message.from_user.id != referral_id and Userx.user_check_ref(referral_id):
            await bot.pin_chat_message(chat_id=message.from_user.id, message_id=message.message_id + 2)
        else:
            await bot.pin_chat_message(chat_id=message.from_user.id, message_id=message.message_id + 1)

    except:
        pass
    await message.answer(
        'üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ —Å–∞–º–æ–º –ª—É—á—à–µ–º –±–æ—Ç–µ –ø–æ <u>–∞–Ω–æ–Ω–∏–º–Ω–æ–º—É</u> –≤–∏–¥–µ–æ –æ–±–º–µ–Ω—É.\n\n'
        '‚ú® –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ –∏–Ω—Ç–∏–º–Ω–æ–µ –≤–∏–¥–µ–æ',
        reply_markup=menu_frep())

    if first_start:
        await message.answer('üéÅ –í–∞–º –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ 10 –º–∏–Ω—É—Ç PREMIUM –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!')
        Userx.user_uptime(user_id=message.from_user.id, minutes=10)


##### [üë§ –ü—Ä–æ—Ñ–∏–ª—å] #####
@router.message(F.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
async def profile(message: Message, bot: Bot, state: FSMContext):
    await state.clear()
    user = Userx.get(user_id=message.from_user.id)
    bot_tag = await bot.get_me()

    date = convert_date(user.user_unix, False)

    if user.user_unix < get_unix():
        response = 'üö´ –î–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç!'
    else:
        response = f'‚úÖ –î–æ—Å—Ç—É–ø –¥–æ: {date}'

    await message.answer(f'<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å</b>\n\n'
                         f'üÜî: <code>{message.from_user.id}</code>\n\n'
                         f'üíµ: {user.user_balance} berrycoins\n\n'
                         f'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n'
                         f'<code>t.me/{bot_tag.username}?start={numbersystem.decimalToOctal(message.from_user.id)}</code>\n\n'
                         f'üë• –ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {0}\n\n'
                         f'{response}', reply_markup=balance_add_finl())


##### [‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è] #####
@router.message(F.text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def profile(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f'<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n'
                         f'–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è <u>–∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ</u> –æ–±–º–µ–Ω–∞ –∏–Ω—Ç–∏–º–Ω—ã–º–∏ –≤–∏–¥–µ–æ 18+\n\n'
                         f'–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É\n\n'
                         f'1 —Ä–µ—Ñ–µ—Ä–∞–ª = {MINUTES_PER_REFERRAL} –º–∏–Ω—É—Ç–∞–º –¥–æ—Å—Ç—É–ø–∞\n'
                         f'1 –≤–∏–¥–µ–æ = {MINUTES_PER_VIDEO} –º–∏–Ω—É—Ç–∞–º –¥–æ—Å—Ç—É–ø–∞\n\n'
                         f'<b>–°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û:</b>\n'
                         f'1. –¶–ü\n'
                         f'2. Pe–î0Fil–∏—è\n'
                         f'3. –°–ü–ê–ú\n'
                         f'4. –ü—Ä–∏—Å—ã–ª–∞—Ç—å –±–æ—Ç—É –≤–∏–¥–µ–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞\n\n'
                         f'–ó–∞ —Ç–µ –∏–ª–∏ –∏–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –ø–æ —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞')


##### [‚ö°Ô∏è PREMIUM] #####
@router.message(F.text == '‚ö°Ô∏è PREMIUM')
async def profile(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f'üí® –£—Å–ø–µ–π—Ç–µ –∫—É–ø–∏—Ç—å PREMIUM –ø–æ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–µ!', reply_markup=premium_tariffs())


##### [ 3 –¥–Ω—è PREMIUM ] #####
@router.callback_query(F.data == '3days_premium')
async def premium_buy(call: CallbackQuery, state: FSMContext):
    await state.clear()
    amount = 300
    minutes = 60 * 24 * 3

    user = Userx.get(user_id=call.from_user.id)

    if user.user_balance < amount:
        await call.answer('üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!')
    else:
        await call.message.answer('‚úÖ –ë—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ 3 –¥–Ω—è –¥–æ—Å—Ç—É–ø–∞!')
        Userx.user_change_balance(call.from_user.id, -amount)
        Userx.user_uptime(user_id=call.from_user.id, minutes=minutes)


##### [ 7 –¥–Ω–µ–π PREMIUM ] #####
@router.callback_query(F.data == '7days_premium')
async def premium_buy(call: CallbackQuery, state: FSMContext):
    await state.clear()
    amount = 600
    minutes = 60 * 24 * 7

    user = Userx.get(user_id=call.from_user.id)

    if user.user_balance < amount:
        await call.answer('üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!')
    else:
        await call.message.answer('‚úÖ –ë—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ 7 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞!')
        Userx.user_change_balance(call.from_user.id, -amount)
        Userx.user_uptime(user_id=call.from_user.id, minutes=minutes)


##### [ 14 –¥–Ω–µ–π PREMIUM ] #####
@router.callback_query(F.data == '14days_premium')
async def premium_buy(call: CallbackQuery, state: FSMContext):
    await state.clear()
    amount = 1000
    minutes = 60 * 24 * 14

    user = Userx.get(user_id=call.from_user.id)

    if user.user_balance < amount:
        await call.answer('üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!')
    else:
        await call.message.answer('‚úÖ –ë—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ 14 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞!')
        Userx.user_change_balance(call.from_user.id, -amount)
        Userx.user_uptime(user_id=call.from_user.id, minutes=minutes)


##### [ üóÇ –ê—Ä—Ö–∏–≤ ] #####
@router.message(F.text == 'üóÇ –ê—Ä—Ö–∏–≤')
async def archive(message: Message):
    await message.answer(f'–£ –Ω–∞—Å –≤ –±–∞–∑–µ {len(Videox.get_all_id())}{randint(0, 9)} –≤–∏–¥–µ–æ',
                         reply_markup=archive_tariffs())


##### [ 100 –∞—Ä—Ö–∏–≤ ] #####
@router.callback_query(F.data == '100_archive')
async def premium_buy(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    amount = 100

    user = Userx.get(user_id=call.from_user.id)

    if user.user_balance < amount:
        await call.answer('üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!')
    else:
        await call.message.answer(f'‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ {amount} –≤–∏–¥–µ–æ!')
        await send_archive_video_to_user(call.from_user.id, amount, user.video_index, bot)


##### [ 300 –∞—Ä—Ö–∏–≤ ] #####
@router.callback_query(F.data == '300_archive')
async def premium_buy(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    amount = 300

    user = Userx.get(user_id=call.from_user.id)

    if user.user_balance < amount:
        await call.answer('üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!')
    else:
        await call.message.answer(f'‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ {amount} –≤–∏–¥–µ–æ!')
        await send_archive_video_to_user(call.from_user.id, amount, user.video_index, bot)


##### [ 700 –∞—Ä—Ö–∏–≤ ] #####
@router.callback_query(F.data == '700_archive')
async def premium_buy(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    amount = 700

    user = Userx.get(user_id=call.from_user.id)

    if user.user_balance < amount:
        await call.answer('üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!')
    else:
        await call.message.answer(f'‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ {amount} –≤–∏–¥–µ–æ!')
        await send_archive_video_to_user(call.from_user.id, amount, user.video_index, bot)
