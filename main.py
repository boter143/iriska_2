import asyncio

from aiogram import Bot, Dispatcher
from aiogram.client.bot import DefaultBotProperties

from tgbot.data.config import BOT_TOKEN, ADMIN_ID, PY_VERSION
from tgbot.routers import register_all_routers
from tgbot.utils.mics_functions import send_archive_video_to_all
from tgbot.utils.misc.bot_commands import set_commands
from tgbot.middlewares import register_all_middlewares
from tgbot.database.db_helper import create_dbx
from tgbot.database.db_users import Userx


async def on_startup(bot: Bot):
    await bot.send_message(ADMIN_ID, f'‚úîÔ∏è ‚ûñ BerryBot ‚ûñ ‚úîÔ∏è\n'
                                     f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'
                                     f'\n\n'
                                     f'<b>–í–µ—Ä—Å–∏—è üêç: {PY_VERSION}\n'
                                     f'–ö–æ–ª-–≤–æ üë•: {Userx.get_all_count()}</b>'
                                     f'\n\n'
                                     f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                     f'<code>‚ùó –î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞.</code>')


async def main():
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))  # –û–±—Ä–∞–∑ –ë–æ—Ç–∞
    dp = Dispatcher()  # –û–±—Ä–∞–∑ –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞

    register_all_routers(dp)  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
    register_all_middlewares(dp)  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö middlewares

    try:
        try:
            await on_startup(bot)  # –†–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∞–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        except:
            print('–ê–î–ú–ò–ù –ù–ï –í–û–®–Å–õ –í –ë–û–¢–ê')
        await set_commands(bot)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è users/admin

        await bot.delete_webhook()
        await bot.get_updates(offset=-1)

        # –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤—Å–µ–º
        loop = asyncio.get_running_loop()
        loop.create_task(send_archive_video_to_all(bot))

        await dp.start_polling(bot)
    except:
        pass


if __name__ == '__main__':
    create_dbx()  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ë–î + –¢–∞–±–ª–∏—Ü

    try:
        asyncio.run(main())
    except:
        pass
